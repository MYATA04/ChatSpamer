import datetime
import asyncio
import sys
from typing import Union

from pyrogram import filters
from pyrogram.errors.exceptions.bad_request_400 import MessageIdInvalid
from pyrogram.types import Message

from config import HELP_COMMANDS
from filters import is_admin, texts_filter
from fsm.fsm import main_fsm
from database.functions import get_chats, get_chat_ids, get_chat_name, add_chat, del_chat, get_message_id, \
    set_message_id, get_intervals, set_interval_chat, set_interval_chats, set_flag, get_flag, set_to_true_flag, \
    get_main_chat_id
from logger.create_logger import logger
from client import app, scheduler

'''______________________________| MAILING |______________________________'''


# Function: Mailing, number of functions: 5
async def mailing_starter_scheduler(chats_interval: int = None) -> None:
    """Launches a mailing at a specific time"""
    chat_ids = await get_chat_ids()

    if not chat_ids:
        return

    flag = await mailing_check()

    if not flag:
        return

    if chats_interval is None:
        intervals = await get_intervals()
        chats_interval = int(intervals[1])

    run_date = datetime.datetime.now() + datetime.timedelta(minutes=chats_interval)

    try:
        scheduler.add_job(func=mailing, trigger="date", run_date=run_date, id="mailing")

    except:
        return

    logger.info(f"[MAILING] The next mailing will take effect in \"{chats_interval}\" minutes.")


async def mailing_check() -> None:
    """Checking whether mailing can continue"""
    flag = await get_flag()

    logger.info("[MAILING] It is not possible to start sending yet, the flag is set to False.")

    return flag


async def sleeping(chat_id: Union[int, str], chat_name: str, type_spam: Union[str, None] = None) -> None:
    """type_spam in ["chat", ...]"""
    intervals = await get_intervals()

    if type_spam == "chat":
        chat_interval = int(intervals[0]) * 60

        logger.info(f"[MAILING] Sent to mail chat with id - {chat_id}, and name - {chat_name}.")

        await asyncio.sleep(chat_interval)


async def check_chat(chat_id: Union[int, str], chat_name: str) -> bool:
    """Check the chat to see if you can send a mail there"""
    try:
        await app.get_chat(chat_id=chat_id)

    except:
        logger.info(
            f"[MAILING] No mail was sent to the chat with ID - {chat_id}, and name {chat_name}. Please delete this chat or check if this account is present in this chat.")

        await app.send_message(chat_id=chat_id,
                               text=f"–í —á–∞—Ç —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º ‚Äî {chat_id} –∏ –∏–º–µ–Ω–µ–º {chat_name} –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞. "
                                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ —ç—Ç–æ—Ç —á–∞—Ç –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

        return False

    else:
        return True


async def mailing() -> None:
    """Main mailing function"""
    chat_ids = await get_chat_ids()
    message_id, from_chat_id = (await get_message_id())[:2]

    for chat_id in chat_ids:
        chat_name = await get_chat_name(chat_id)

        if not await mailing_check():
            return

        if not await check_chat(chat_id, chat_name):
            continue

        try:
            logger.info(
                f"[MAILING] We send the newsletter to the chat with ID - {chat_id} and name - {chat_name} . . .")
            await app.forward_messages(chat_id=chat_id,
                                       from_chat_id=from_chat_id,
                                       message_ids=message_id)

        except MessageIdInvalid:
            text = "<i><b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Ç–µ—Ä—è–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞, –ø–æ —ç—Ç–æ–º—É, —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è.</b></i>"

            await set_flag(False)

            return await app.send_message(chat_id=await get_main_chat_id(),
                                          text=text)

        await sleeping(chat_id, chat_name, "chat")

    intervals = await get_intervals()
    chats_interval = int(intervals[1])
    chat_interval = int(intervals[0])

    await mailing_starter_scheduler(chats_interval - chat_interval)


'''______________________________| HANDLERS |______________________________'''

'''____________________| START |____________________'''


# Command: start, number of handlers: 1
@app.on_message(filters.command("start", prefixes="/") & is_admin & main_fsm.check_state(main_fsm.chill))
async def cmd_start(_, message: Message):
    """Command: start"""
    text = ("–î–æ–±—Ä—ã–π –¥–µ–Ω—å üëã\n"
            "\n"
            "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞, –≤–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã:\n\n") + HELP_COMMANDS

    text += "\n\n–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã —Å–æ–∑–¥–∞–¥–∏—Ç–µ (–∫–æ–º–∞–Ω–¥–∞ - <code>/setmsg</code>) —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."

    await app.send_message(chat_id=message.chat.id,
                           text=text)


'''____________________| HELP |____________________'''


# Command: help, number of handlers: 1
@app.on_message(filters.command("help", prefixes="/") & is_admin & main_fsm.check_state(main_fsm.chill))
async def cmd_help(_, message: Message):
    """Command: help"""
    text = HELP_COMMANDS

    await app.send_message(chat_id=message.chat.id,
                           text=text)


'''____________________| CHATS |____________________'''


# Command: chats, number of handlers: 1
@app.on_message(filters.command("chats", prefixes="/") & is_admin & main_fsm.check_state(main_fsm.chill))
async def cmd_chats(_, message: Message):
    """Command: chats"""
    chats = await get_chats()

    if not chats:
        return await app.send_message(chat_id=message.chat.id,
                                      text="–ü–æ–∫–∞ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ—Ç.")

    text = ""
    count = 1

    for chat in chats:
        text += f"\n<b>{count}</b>.  id: <code>{chat[0]}</code>; name: <code>{chat[1]}</code>"
        count += 1

    await app.send_message(chat_id=message.chat.id,
                           text=text)


'''____________________| CANCEL |____________________'''


# Text: ["–û—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω–∞", "–û—Ç–º–µ–Ω–∏—Ç—å", "–æ—Ç–º–µ–Ω–∏—Ç—å", "–æ", "–û"], number of handlers: 1
@app.on_message(filters.text & texts_filter(["–û—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω–∞", "–û—Ç–º–µ–Ω–∏—Ç—å", "–æ—Ç–º–µ–Ω–∏—Ç—å", "–æ", "–û"]) & is_admin)
async def text_cancel(_, message: Message):
    """Text: cancel, cleaning fsm"""
    current_state = await main_fsm.get_state()

    if current_state == "chill":
        return

    await main_fsm.clear()

    text = "<i><b>–î–µ–π—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã!</b></i>"

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    logger.info("[CUSTOM] Canceled state: %s" % current_state)


'''____________________| ADDCHAT |____________________'''


# Command: addchat, number of handlers: 4
@app.on_message(filters.command("addchat", prefixes="/") & is_admin & main_fsm.check_state(main_fsm.chill))
async def cmd_addchat_step_1(_, message: Message):
    """Command: addchat, step 1"""
    text = ("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω—É–∂–Ω—ã –≤–æ—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
            "1. ID —á–∞—Ç–∞ (–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ: https://t.me/username_to_id_bot)\n"
            "2. –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ, –ø—Ä–æ—Å—Ç–æ —á–∞—Ç –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –ø–æ–¥ —ç—Ç–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º).")

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    text = "–°–ø–µ—Ä–≤–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —á–∞—Ç–∞ (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ):"

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    await main_fsm.set_state(main_fsm.add_chat_1)


@app.on_message(filters.text & is_admin & main_fsm.check_state(main_fsm.add_chat_1))
async def cmd_addchat_step_2(_, message: Message):
    """Command: addchat, step 2"""
    chat_ids = await get_chat_ids()

    if message.text[0] != "-" or not message.text[1:].isdigit():
        if message.text[0] == "-":
            text = "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—á–∏—Å–ª–æ–≤–æ–µ</b> –∑–Ω–∞—á–µ–Ω–∏–µ:</i>"

            return await app.send_message(chat_id=message.chat.id,
                                          text=text)

    elif message.text in chat_ids:
        chat_name = await get_chat_name(message.text)

        if chat_name:
            text = f"<i>–î–∞–Ω–Ω—ã–π —á–∞—Ç —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º: <b>{chat_name}</b></i>"

            return await app.send_message(chat_id=message.chat.id,
                                          text=text)

    try:
        await app.get_chat(message.text)

    except:
        text = f"<i>–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∏–ª–∏ —Ç–∞–∫–æ–≥–æ —á–∞—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</i>"

        return await app.send_message(chat_id=message.chat.id,
                                      text=text)

    await main_fsm.set_data(chat_id=message.text)

    text = "–¢–µ–ø–µ—Ä—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ª—é–±–æ–µ) —á–∞—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ):"

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    await main_fsm.set_state(main_fsm.add_chat_2)


@app.on_message(filters.text & is_admin & main_fsm.check_state(main_fsm.add_chat_2))
async def cmd_addchat_step_3(_, message: Message):
    """Command: addchat, step 3"""
    data = await main_fsm.get_data()
    chat_id = data['chat_id']

    await main_fsm.set_data(chat_name=message.text)

    text = f"id: <code>{chat_id}</code>; name: <code>{message.text}</code>"

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    text = (
        "–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å <b>–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>–ü</code> ; <code>–ø</code> ; "
        "<code>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code> ; <code>–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code>.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å <b>–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>–û</code> ; <code>–æ</code> ; <code>–û—Ç–º–µ–Ω–∞</code> ; "
        "<code>–æ—Ç–º–µ–Ω–∞</code> ; <code>–û—Ç–º–µ–Ω–∏—Ç—å</code> ; <code>–æ—Ç–º–µ–Ω–∏—Ç—å</code>.")

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    await main_fsm.set_state(main_fsm.add_chat_3)


@app.on_message(filters.text & texts_filter(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ü", "–ø"]) & is_admin & main_fsm.check_state(
    main_fsm.add_chat_3))
async def cmd_addchat_step_4(_, message: Message):
    """Command: addchat, step 4"""
    data = await main_fsm.get_data()
    chat_id = data['chat_id']
    chat_name = data['chat_name']

    await main_fsm.clear()

    await add_chat(chat_id, chat_name)

    text = (f"<i><b>–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b></i>\n\n"
            f"          id: <code>{chat_id}</code>; name: <code>{chat_name}</code>")

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    text = "<b>–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å—Ç—É–ø–∏—Ç –≤ —Å–∏–ª—É –≤ —ç—Ç–æ—Ç —á–∞—Ç, –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —á–∞—Ç—ã.</b>"

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    chats = await get_chats()

    text = ""
    count = 1

    for chat in chats:
        text += f"\n<b>{count}</b>.  id: <code>{chat[0]}</code>; name: <code>{chat[1]}</code>"
        count += 1

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    logger.info(f"[CUSTOM] New chat added: chat_id: {chat_id}; chat_name: {chat_name}")


'''____________________| DELCHAT |____________________'''


# Command: delchat, number of handlers: 3
@app.on_message(filters.command("delchat", prefixes="/") & is_admin & main_fsm.check_state(main_fsm.chill))
async def cmd_delchat_step_1(_, message: Message):
    """Command: delchat, step 1"""
    chats = await get_chats()

    text = ""
    count = 1

    for chat in chats:
        text += f"\n<b>{count}</b>.  id: <code>{chat[0]}</code>; name: <code>{chat[1]}</code>"
        count += 1

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å (–≤ —á–∏—Å–ª–æ–≤–æ–º –≤–∏–¥–µ):"

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    await main_fsm.set_state(main_fsm.del_chat_1)


@app.on_message(filters.text & is_admin & main_fsm.check_state(main_fsm.del_chat_1))
async def cmd_delchat_step_2(_, message: Message):
    """Command: delchat, step 2"""
    chat_ids = await get_chat_ids()

    if message.text not in chat_ids:
        text = f"<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ id —á–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–≤–µ—Ä—Ö—É.</i>"

        return await app.send_message(chat_id=message.chat.id,
                                      text=text)

    chat_name = await get_chat_name(message.text)
    chat_id = message.text

    await main_fsm.set_data(chat_id=chat_id)
    await main_fsm.set_data(chat_name=chat_name)

    text = f"id: <code>{chat_id}</code>; name: <code>{chat_name}</code>"

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    text = (
        "–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å <b>—É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>–ü</code> ; <code>–ø</code> ; "
        "<code>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code> ; <code>–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code>.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å <b>—É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>–û</code> ; <code>–æ</code> ; <code>–û—Ç–º–µ–Ω–∞</code> ; "
        "<code>–æ—Ç–º–µ–Ω–∞</code> ; <code>–û—Ç–º–µ–Ω–∏—Ç—å</code> ; <code>–æ—Ç–º–µ–Ω–∏—Ç—å</code>.")

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    await main_fsm.set_state(main_fsm.del_chat_2)


@app.on_message(filters.text & texts_filter(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ü", "–ø"]) & is_admin & main_fsm.check_state(
    main_fsm.del_chat_2))
async def cmd_delchat_step_3(_, message: Message):
    """Command: delchat, step 3"""
    data = await main_fsm.get_data()
    chat_id = data['chat_id']
    chat_name = data['chat_name']

    await main_fsm.clear()

    await del_chat(chat_id)

    text = (f"<i><b>–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b></i>\n\n"
            f"          id: <code>{chat_id}</code>; name: <code>{chat_name}</code>")

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    text = ("<b>–ï—Å–ª–∏ –∏–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞, –∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞—Å—å —Ä–∞—Å—Å—ã–ª–∫–∞, —Ç–æ —Å–ø–µ—Ä–≤–∞ "
            "—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç, –∏ –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ –ø–æ–ª–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏, —á–∞—Ç —É–¥–∞–ª–∏—Ç—Å—è.</b>")

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    chats = await get_chats()

    text = ""
    count = 1

    for chat in chats:
        text += f"\n<b>{count}</b>.  id: <code>{chat[0]}</code>; name: <code>{chat[1]}</code>"
        count += 1

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    logger.info(f"[CUSTOM] Chat deleted: chat_id: {chat_id}; chat_name: {chat_name}")


'''____________________| MSG |____________________'''


# Command: msg, number of handlers: 1
@app.on_message(filters.command("msg", prefixes="/") & is_admin & main_fsm.check_state(main_fsm.chill))
async def cmd_msg(_, message: Message):
    """Command: msg"""
    message_id, from_chat_id, date = await get_message_id()

    if message_id == 0:
        text = (
            "<i>–î–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∞—Å—å —Ä–∞—Å—Å—ã–ª–∫–∞, –ø–æ —ç—Ç–æ–º—É –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É - <code>/setmsg</code>.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É - <code>/stopmsg</code>.</i>")

        return await app.send_message(chat_id=message.chat.id,
                                      text=text)

    try:
        await app.forward_messages(chat_id=message.chat.id,
                                   from_chat_id=from_chat_id,
                                   message_ids=message_id)

        text = (f"ID –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{message_id}</code>\n"
                f"ID —á–∞—Ç–∞ –≥–¥–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{from_chat_id}</code>\n"
                f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{date}</code>")

        await app.send_message(chat_id=message.chat.id,
                               text=text)

    except:
        text = f"<i>–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ —Å ID - <code>{from_chat_id}</code>, –∏–ª–∏ –æ–Ω –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.</i>"

        await app.send_message(chat_id=message.chat.id,
                               text=text)


'''____________________| SETMSG |____________________'''


# Command: setmsg, number of handlers: 3
@app.on_message(filters.command("setmsg", prefixes="/") & is_admin & main_fsm.check_state(main_fsm.chill))
async def cmd_setmsg_step_1(_, message: Message):
    """Command: setmsg, step 1"""
    text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    await main_fsm.set_state(main_fsm.set_msg_1)


@app.on_message(is_admin & main_fsm.check_state(main_fsm.set_msg_1))
async def cmd_setmsg_step_2(_, message: Message):
    """Command: setmsg, step 2"""
    message_id = message.id
    from_chat_id = message.chat.id

    await main_fsm.set_data(message_id=message_id)
    await main_fsm.set_data(from_chat_id=from_chat_id)

    try:
        await app.forward_messages(chat_id=message.chat.id,
                                   from_chat_id=from_chat_id,
                                   message_ids=message_id)

    except BaseException as e:
        text = (f"<i>–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
                f"–û—à–∏–±–∫–∞: {e}</i>")

        return await app.send_message(chat_id=message.chat.id,
                                      text=text)

    text = (
        "–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å <b>–∑–∞–º–µ–Ω—É –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>–ü</code> ; <code>–ø</code> ; "
        "<code>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code> ; <code>–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code>.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å <b>–∑–∞–º–µ–Ω—É –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>–û</code> ; <code>–æ</code> ; <code>–û—Ç–º–µ–Ω–∞</code> ; "
        "<code>–æ—Ç–º–µ–Ω–∞</code> ; <code>–û—Ç–º–µ–Ω–∏—Ç—å</code> ; <code>–æ—Ç–º–µ–Ω–∏—Ç—å</code>.")

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    await main_fsm.set_state(main_fsm.set_msg_2)


@app.on_message(filters.text & texts_filter(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ü", "–ø"]) & is_admin & main_fsm.check_state(
    main_fsm.set_msg_2))
async def cmd_setmsg_step_3(_, message: Message):
    """Command: setmsg, step 3"""
    data = await main_fsm.get_data()
    message_id = data['message_id']
    from_chat_id = data['from_chat_id']
    date = datetime.datetime.now().strftime("%d/%m/%Y, %H:%M:%S")

    await main_fsm.clear()

    await set_message_id(message_id, from_chat_id, date)

    text = ("<b><i>–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ!</i>\n\n"
            "–ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å —Ä–∞—Å—Å—ã–ª–∫–∞, –æ–Ω–æ –≤—Å—Ç—É–ø–∏—Ç –≤ —Å–∏–ª—É —Å—Ä–∞–∑—É, –∞ –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å, –≤—Å—Ç—É–ø–∏—Ç –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ "
            "–∑–∞–∫–æ–Ω—á–∏—Ç —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ –≤—Å–µ —á–∞—Ç—ã, –∞ –µ—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–æ –≤—Å–µ —á–∞—Ç—ã –∑–∞–∫–æ–Ω—á–µ–Ω–∞, "
            "–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–ø–∏—Ç, —Ç–æ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å—Ç—É–ø–∏—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ —Å–ø—è—á–∫–∏.</b>")

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    logger.info(
        f"[CUSTOM] The mailing message has been changed: message_id: {message_id}; from_chat_id: {from_chat_id}; date: {date}")

    if not await get_flag():
        await set_flag(True)
        await mailing()


'''____________________| STARTMSG |____________________'''


# Command: startmsg, number of handlers: 2
@app.on_message(filters.command("startmsg", prefixes="/") & is_admin & main_fsm.check_state(main_fsm.chill))
async def cmd_startmsg_step_1(_, message: Message):
    """Command: stopmsg"""
    if await get_flag():
        text = "<i><b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.</b></i>"

        return await app.send_message(chat_id=message.chat.id,
                                      text=text)

    text = (
        "–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å <b>—Å—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>–ü</code> ; <code>–ø</code> ; "
        "<code>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code> ; <code>–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code>.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å <b>—Å—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>–û</code> ; <code>–æ</code> ; <code>–û—Ç–º–µ–Ω–∞</code> ; "
        "<code>–æ—Ç–º–µ–Ω–∞</code> ; <code>–û—Ç–º–µ–Ω–∏—Ç—å</code> ; <code>–æ—Ç–º–µ–Ω–∏—Ç—å</code>.")

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    await main_fsm.set_state(main_fsm.start_msg_1)


@app.on_message(filters.text & texts_filter(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ü", "–ø"]) & is_admin & main_fsm.check_state(
    main_fsm.start_msg_1))
async def cmd_startmsg_step_2(_, message: Message):
    """Command: startmsg, step 2"""
    await main_fsm.clear()

    text = f"<i><b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b></i>"

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    logger.info(f"[CUSTOM] Mailing started")

    await set_flag(True)
    await mailing()


'''____________________| STOPMSG |____________________'''


# Command: stopmsg, number of handlers: 2
@app.on_message(filters.command("stopmsg", prefixes="/") & is_admin & main_fsm.check_state(main_fsm.chill))
async def cmd_stopmsg_step_1(_, message: Message):
    """Command: stopmsg"""
    if not await get_flag():
        text = "<i><b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.<b></i>"

        return await app.send_message(chat_id=message.chat.id,
                                      text=text)

    text = (
        "–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å <b>–æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>–ü</code> ; <code>–ø</code> ; "
        "<code>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code> ; <code>–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code>.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å <b>–æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>–û</code> ; <code>–æ</code> ; <code>–û—Ç–º–µ–Ω–∞</code> ; "
        "<code>–æ—Ç–º–µ–Ω–∞</code> ; <code>–û—Ç–º–µ–Ω–∏—Ç—å</code> ; <code>–æ—Ç–º–µ–Ω–∏—Ç—å</code>.")

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    await main_fsm.set_state(main_fsm.stop_msg_1)


@app.on_message(filters.text & texts_filter(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ü", "–ø"]) & is_admin & main_fsm.check_state(
    main_fsm.stop_msg_1))
async def cmd_stopmsg_step_2(_, message: Message):
    """Command: stopmsg, step 2"""
    await main_fsm.clear()

    text = f"<i><b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b></i>"

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    await set_flag(False)

    try:
        if not scheduler.get_job(job_id="mailing"):
            scheduler.remove_job(job_id="mailing")

    except:
        pass

    logger.info(f"[CUSTOM] Mailing stopped")


'''____________________| INT |____________________'''


# Command: int, number of handlers: 3
@app.on_message(filters.command("int", prefixes="/") & is_admin & main_fsm.check_state(main_fsm.chill))
async def cmd_int(_, message: Message):
    """Command: int"""
    chat_interval, chats_interval = await get_intervals()

    text = (f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏: <code>{chat_interval}</code> –º–∏–Ω.\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏: <code>{chats_interval}</code> –º–∏–Ω.")

    await app.send_message(chat_id=message.chat.id,
                           text=text)


'''____________________| INTCHAT |____________________'''


# Command: intchat, number of handlers: 3
@app.on_message(filters.command("intchat", prefixes="/") & is_admin & main_fsm.check_state(main_fsm.chill))
async def cmd_intchat_step_1(_, message: Message):
    """Command: intchat, step 1"""
    text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö, –≤ —á–∏—Å–ª–æ–≤–æ–º –≤–∏–¥–µ):"

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    await main_fsm.set_state(main_fsm.int_chat_1)


@app.on_message(filters.text & is_admin & main_fsm.check_state(main_fsm.int_chat_1))
async def cmd_intchat_step_2(_, message: Message):
    """Command: intchat, step 2"""
    if not message.text.isdigit():
        text = "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—á–∏—Å–ª–æ–≤–æ–µ</b> –∑–Ω–∞—á–µ–Ω–∏–µ:</i>"

        return await app.send_message(chat_id=message.chat.id,
                                      text=text)

    interval_chat = int(message.text)

    await main_fsm.set_data(interval_chat=interval_chat)

    text = (
        "–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å <b>–∑–∞–º–µ–Ω—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>–ü</code> ; <code>–ø</code> ; "
        "<code>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code> ; <code>–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code>.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å <b>–∑–∞–º–µ–Ω—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>–û</code> ; <code>–æ</code> ; <code>–û—Ç–º–µ–Ω–∞</code> ; "
        "<code>–æ—Ç–º–µ–Ω–∞</code> ; <code>–û—Ç–º–µ–Ω–∏—Ç—å</code> ; <code>–æ—Ç–º–µ–Ω–∏—Ç—å</code>.")

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    await main_fsm.set_state(main_fsm.int_chat_2)


@app.on_message(filters.text & texts_filter(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ü", "–ø"]) & is_admin & main_fsm.check_state(
    main_fsm.int_chat_2))
async def cmd_intchat_step_3(_, message: Message):
    """Command: intchat, step 3"""
    data = await main_fsm.get_data()
    interval_chat = data['interval_chat']

    await main_fsm.clear()

    await set_interval_chat(interval_chat)

    text = f"<i><b>–ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ - {interval_chat} –º–∏–Ω.!</b></i>"

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    logger.info(f"[CUSTOM] The mailing interval between chats has been changed: {interval_chat}")


'''____________________| INTCHATS |____________________'''


# Command: intchats, number of handlers: 3
@app.on_message(filters.command("intchats", prefixes="/") & is_admin & main_fsm.check_state(main_fsm.chill))
async def cmd_intchats_step_1(_, message: Message):
    """Command: intchat, step 1"""
    text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö, –≤ —á–∏—Å–ª–æ–≤–æ–º –≤–∏–¥–µ):"

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    await main_fsm.set_state(main_fsm.int_chats_1)


@app.on_message(filters.text & is_admin & main_fsm.check_state(main_fsm.int_chats_1))
async def cmd_intchats_step_2(_, message: Message):
    """Command: intchats, step 2"""
    if not message.text.isdigit():
        text = "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—á–∏—Å–ª–æ–≤–æ–µ</b> –∑–Ω–∞—á–µ–Ω–∏–µ:</i>"

        return await app.send_message(chat_id=message.chat.id,
                                      text=text)

    interval_chats = int(message.text)

    await main_fsm.set_data(interval_chats=interval_chats)

    text = (
        "–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å <b>–∑–∞–º–µ–Ω—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>–ü</code> ; <code>–ø</code> ; "
        "<code>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code> ; <code>–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</code>.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å <b>–∑–∞–º–µ–Ω—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>–û</code> ; <code>–æ</code> ; <code>–û—Ç–º–µ–Ω–∞</code> ; "
        "<code>–æ—Ç–º–µ–Ω–∞</code> ; <code>–û—Ç–º–µ–Ω–∏—Ç—å</code> ; <code>–æ—Ç–º–µ–Ω–∏—Ç—å</code>.")

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    await main_fsm.set_state(main_fsm.int_chats_2)


@app.on_message(filters.text & texts_filter(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ü", "–ø"]) & is_admin & main_fsm.check_state(
    main_fsm.int_chats_2))
async def cmd_intchats_step_3(_, message: Message):
    """Command: intchats, step 3"""
    data = await main_fsm.get_data()
    interval_chats = data['interval_chats']

    await main_fsm.clear()

    await set_interval_chats(interval_chats)

    text = f"<i><b>–ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ - {interval_chats} –º–∏–Ω.!</b></i>"

    await app.send_message(chat_id=message.chat.id,
                           text=text)

    logger.info(f"[CUSTOM] The mailing interval between full mailings has been changed: {interval_chats}")


'''______________________________| RUN |______________________________'''

if __name__ == '__main__':
    try:
        scheduler.start()
        set_to_true_flag()

        try:
            scheduler.remove_job(job_id="mailing")

        except:
            pass

        scheduler.add_job(func=mailing_starter_scheduler, trigger="date",
                          run_date=(datetime.datetime.now() + datetime.timedelta(seconds=30)), id="mailing")

        app.run()

    except (KeyboardInterrupt, SystemExit):
        logger.critical("[BOT] BOT IS STOPPED!")
        sys.exit()

    except BaseException as ex:
        logger.critical(f"[BOT] BOT IS STOPPED! ERROR: {ex}")
        raise ex
